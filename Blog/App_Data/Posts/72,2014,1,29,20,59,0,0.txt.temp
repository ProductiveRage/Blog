## Happy Logging

I started a project recently and got to the point where some of the classes needed a way to write out warnings and other debug messages so I started hashing out a quick **ILogEvents** interface, as I've done for other projects.

And stopped, wondering if I had half a dozen different projects with very similar logging requirements that I'd written similar code for. There are some excuses for this; some of them are internal work projects and some of them are my personal projects. Some of them have specific requirements like writing requests and responses into particular columns in a database but most of them are the same sort of thing.

So why am I writing the same code over and over again? In fairness, I've refined the process over the various implementations but I'm now well past the point where I wish that I'd included some particular feature earlier on when I write these loggers.

### What do I want from a logger?

Although it seems obvious at a first glance what a logger should do (log messages, duh) there are some requirements, or maybe ideals, that I'd like.

1. Delayed evaluation of messages (so that it's possible to generate detailed and expensive-to-generate messages - eg. serialised object graphs - with almost zero cost if log messages at that level are not being recorded anywhere)

1. A way to buffer messages so that writes to disk, for example, can be batched up (ideally having a single "write thread" to avoid file locking issues), in some scenarios this could probably be consider equivalent to saying that it should be possible for the logging to be be asynchronous so that callers never have to wait for log requests to succeed before carrying on with their real work

1. The existence of convenience methods for the most common logging calls, including calls that will ignore any logging errors (if the call to a log to record a warning failed, what am I going to do with a warning about logging the warning.. try to log it?!)

1. Simple-to-use, without any magic (I had to integrate with a library that used log4net once, I didn't like the static references or how incredibly difficult it seemed to be to configure programatically)

A follow-on from points 2 and 3 is that it should to try to log as much as possible if things go wrong. For example, if a batch of 6 log messages are to be written and it turns out that one of those messages throw an exception was its message content is evaluated then that one message should be ignored and the others written. This is a bit different to how I would normally like to write code (fail as fast as possible and identify what failed) but for logging it feels like it makes sense.