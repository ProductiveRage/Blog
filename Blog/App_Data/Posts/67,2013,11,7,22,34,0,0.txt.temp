## C# Async: The old-fashioned way

Content

    // Note: Must have "async" keyword on method to use "await"
    // Note: Must target 4.5 to avoid error "Predefined type 'System.Runtime.CompilerServices.IAsyncStateMachine' is not defined or imported"
    private async static void Test1()
    {
      var webRequest = WebRequest.Create("http://www.google.co.uk");
      using (var response = await webRequest.GetResponseAsync())
      {
        using (var responseStream = response.GetResponseStream())
        {
          using (var stringReader = new StreamReader(responseStream))
          {
            var content = await stringReader.ReadToEndAsync();
          }
        }
      }
    }

    // The HttpClient (.net 4.5) has async support built-in
    private async static void Test2()
    {
      var webRequest = new HttpClient();
      var fields = new FormUrlEncodedContent(new[] 
      {
        new KeyValuePair<string, string>("", "login")
      });
      using (var response = await webRequest.PostAsync("http://www.google.co.uk", fields))
      {
      }
      using (var response = await webRequest.GetAsync("http://www.google.co.uk"))
      {
        var content = await response.Content.ReadAsStringAsync();
      }
    }

    public static class WebRequestAsyncExtensions
    {
      public static Task<Stream> GetRequestStreamAsync(this WebRequest request)
      {
        return Task.Factory.FromAsync<Stream>(
          request.BeginGetRequestStream,
          request.EndGetRequestStream,
          null // No state required
        );
      }

      public static Task<WebResponse> GetResponseAsync(this WebRequest request)
      {
        return Task.Factory.FromAsync<WebResponse>(
          request.BeginGetResponse,
          request.EndGetResponse,
          null
        );
      }
    }

Content